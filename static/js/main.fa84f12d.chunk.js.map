{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","enterName","e","setState","enemies_name","target","value","enterLink","enemies_img","slap","play","bounce","Bounce","Audio","state","audioUrl","translate","from","x","y","to","scale","applyTo","document","querySelectorAll","lastSlap","slapCount","songVideo","quoteStyle","slapImg","this","window","origin","className","src","alt","onKeyUp","placeholder","onChange","onClick","width","height","frameBorder","allow","style","display","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAgJeA,E,YAzIb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KA2BRC,UAAY,SAACC,GACX,EAAKC,SAAS,CACZC,aAAeF,EAAEG,OAAOC,SA9BV,EAiClBC,UAAY,SAACL,GACX,EAAKC,SAAS,CACZK,YAAcN,EAAEG,OAAOC,SAnCT,EAsClBG,KAAM,WACF,EAAKN,SAAS,CACZO,MAAO,IAET,IAAIC,EAAS,IAAIC,EACL,IAAIC,MAAM,EAAKC,MAAMC,UAC3BL,OACNC,EAAOK,UAAU,CACfC,KAAM,CAAEC,GAAI,IAAKC,EAAG,IACpBC,GAAI,CAAEF,EAAG,GAAIC,EAAG,KAEjBE,MAAM,CACLJ,KAAQ,CAACC,EAAE,EAAEC,EAAE,IACfC,GAAM,CAACF,EAAE,EAAEC,EAAE,KAEdG,QAAQC,SAASC,iBAAiB,sBACnC,IAAIC,EAAW,EAAKX,MAAMY,UAE1B,EAAKvB,SAAS,CACVuB,UAAYD,EAAS,IAEtB,EAAKX,MAAMY,UAAY,IACxB,EAAKvB,SAAS,CACZwB,UAAY,uDACZC,WAAa,WA5DnB,EAAKd,MAAQ,CACXJ,MAAO,EACPK,SAAU,GACVc,QAAU,GACVH,UAAY,EACZtB,aAAc,GACdI,YAAa,GACbmB,UAAU,GACVC,WAAW,IAVG,E,iFAkBhBE,KAAK3B,SAAS,CACZY,SAAWgB,OAAOC,OAAO,YACzBH,QAAUE,OAAOC,OAAO,YACxBxB,YAAa,uDACboB,WAAa,W,+BA6CR,IAAD,OACN,OACE,yBAAKK,UAAU,mBACZ,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,4BAAd,kBAGA,wBAAIA,UAAU,eAAeH,KAAKhB,MAAMY,YAE5C,yBAAKO,UAAU,YACX,yBAAKA,UAAU,oBACb,yBAAKC,IAAKJ,KAAKhB,MAAMe,WAEvB,yBAAKI,UAAU,QACb,yBAAKA,UAAU,aACZ,yBACCA,UAAU,eACVC,IAAKJ,KAAKhB,MAAMN,YAChB2B,IAAI,UAEJ,2BAAIL,KAAKhB,MAAMV,cACf,2BAAOgC,QAAS,SAAClC,GAAD,OAAK,EAAKD,UAAUC,IACpCmC,YAAY,2BACZJ,UAAU,0BACV,2BACE,6BACA,2BAAOK,SAAU,SAACpC,GAAD,OAAK,EAAKK,UAAUL,IACrCmC,YAAY,iCACZJ,UAAU,4BAIhB,yBAAKA,UAAU,eACf,4BACEA,UAAU,kCACVM,QAAST,KAAKrB,MAFhB,yBASN,yBAAKwB,UAAU,yBACb,4BAAQO,MAAM,OAAOC,OAAO,QAAQP,IAAKJ,KAAKhB,MAAMa,UACpDe,YAAY,IACZC,MAAM,4EAGN,uBAAGV,UAAU,yBAAyBW,MAAO,CAACC,QAAUf,KAAKhB,MAAMc,aAAnE,yOAEA,qDAKJ,yBAAKK,UAAU,mBACX,yBAAKA,UAAU,iFAAf,0BACuB,uBAAGa,KAAK,qCAAR,qB,GA/HnBC,IAAMC,WCOJC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fa84f12d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport * as Bounce from 'bounce.js'\n\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      play : false,\n      audioUrl :'', \n      slapImg : '',\n      slapCount : 0,\n      enemies_name :'',\n      enemies_img :'',\n      songVideo:'',\n      quoteStyle:'',\n\n    }\n  \n  }\n\n\n  componentDidMount(){\n    this.setState({\n      audioUrl : window.origin+\"/slap.wav\",\n      slapImg : window.origin+\"/slap.png\",\n      enemies_img :'https://www.w3schools.com/bootstrap4/img_avatar3.png',\n      quoteStyle : 'none',\n    })\n    \n  }\n  \n\n  enterName = (e)=>{\n    this.setState({\n      enemies_name : e.target.value\n    })\n  }\n  enterLink = (e) =>{\n    this.setState({\n      enemies_img : e.target.value\n    })\n  }\n  slap =()=> {\n      this.setState({\n        play : true\n      })\n      let bounce = new Bounce();\n      let audio = new Audio(this.state.audioUrl)\n      audio.play()\n      bounce.translate({\n        from: { x: -300, y: 50 },\n        to: { x: 20, y: 0 }\n      })\n      .scale({\n        from  : {x:1,y:15},\n        to  : {x:1,y:1},\n      })\n      .applyTo(document.querySelectorAll(\".animation-target\"));\n      let lastSlap = this.state.slapCount ;\n\n      this.setState({\n          slapCount : lastSlap+1\n      })\n      if(this.state.slapCount > 10){\n        this.setState({\n          songVideo:  \"https://www.youtube.com/embed/XwjjbWg875Q?autoplay=1\",\n          quoteStyle : 'block'\n        })\n      }\n  }\n\n  render(){\n    return(\n      <div className=\"container-fluid\">\n         <div className=\"row\">\n            <div className=\"col-md-3\">\n                <h3 className=\"text-center slap-counter\">\n                    Slap Counter : \n                </h3>\n                <h1 className=\"text-center\">{this.state.slapCount}</h1>\n            </div>\n            <div className=\"col-md-4\">\n                <div className=\"animation-target\">\n                  <img src={this.state.slapImg}></img>\n                </div>\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                     <img \n                      className=\"card-img-top\" \n                      src={this.state.enemies_img}\n                      alt=\"image\"/>\n                    \n                      <p>{this.state.enemies_name}</p>\n                      <input onKeyUp={(e)=>this.enterName(e)} \n                      placeholder=\"Insert your enemies name\" \n                      className=\"form-control input-lg\"></input>\n                      <p>\n                        <br></br>\n                        <input onChange={(e)=>this.enterLink(e)} \n                        placeholder=\"Insert your enemies image link\" \n                        className=\"form-control input-lg\"\n                        />\n                      </p>\n                  </div>\n                  <div className=\"card-footer\">\n                  <button \n                    className=\"btn btn-block btn-danger btn-lg\" \n                    onClick={this.slap}>\n                      Tampols It Baby!!!\n                  </button>\n                </div>\n                </div>\n              \n            </div>\n            <div className=\"col-md-4 slap-counter\">\n              <iframe width=\"100%\" height=\"300px\" src={this.state.songVideo}\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n              >\n              </iframe>\n              <p className=\"text-muted text-center\" style={{display : this.state.quoteStyle}}>\n              I offer you peace, I offer you love, I offer you friendship. I see your beauty, I hear your need, I feel your feelings. My wisdom flows from the highest source. I salute that Source in you. Let us work together for unity and peace \n              <span>- Mahatma Gandhi</span>\n              </p>\n             \n              </div>\n          </div>\n          <div className=\"row text-center\">\n              <div className=\"col-md-12 navbar text-white fixed-bottom navbar-expand-sm navbar-dark bg-dark\">\n              Tampolin - 2019 by  :  <a href=\"https://www.youtube.com/agitnaeta\">\n                    @agitnaeta\n              </a>\n              </div>\n          </div>\n      </div>\n    \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}