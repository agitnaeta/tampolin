{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","enterName","e","setState","enemies_name","target","value","enterLink","enemies_img","slap","play","bounce","Bounce","Audio","state","audioUrl","translate","from","x","y","to","scale","applyTo","document","querySelectorAll","lastSlap","slapCount","handImageDisplay","songVideo","quoteStyle","changeImage","preventDefault","reader","FileReader","files","file","onloadend","result","readAsDataURL","slapImg","this","process","className","onClick","style","display","alt","src","htmlFor","type","id","onChange","onKeyUp","placeholder","title","width","height","frameBorder","allow","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a994eef4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport * as Bounce from 'bounce.js'\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      play : false,\r\n      audioUrl :'', \r\n      slapImg : '',\r\n      slapCount : 0,\r\n      enemies_name :'',\r\n      enemies_img :'',\r\n      songVideo:'',\r\n      quoteStyle:'',\r\n      handImageDisplay : ''\r\n\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      audioUrl : process.env.REACT_APP_SRC +\"/slap.wav\",\r\n      slapImg : process.env.REACT_APP_SRC +\"/slap.png\",\r\n      enemies_img :'https://www.w3schools.com/bootstrap4/img_avatar3.png',\r\n      quoteStyle : 'none',\r\n      handImageDisplay : 'none',\r\n      enemies_name :'Click Image For \"Tampol\"'\r\n    })\r\n    \r\n  }\r\n  \r\n\r\n  enterName = (e)=>{\r\n    this.setState({\r\n      enemies_name : e.target.value\r\n    })\r\n  }\r\n  enterLink = (e) =>{\r\n    this.setState({\r\n      enemies_img : e.target.value\r\n    })\r\n  }\r\n  slap =()=> {\r\n      this.setState({\r\n        play : true\r\n      })\r\n      let bounce = new Bounce();\r\n      let audio = new Audio(this.state.audioUrl)\r\n      audio.play()\r\n      bounce.translate({\r\n        from: { x: -300, y: 50 },\r\n        to: { x: 0, y: 0 }\r\n      })\r\n      .scale({\r\n        from  : {x:1 ,y:5},\r\n        to  : {x:1,y:1},\r\n      })\r\n      .applyTo(document.querySelectorAll(\".animation-target\"));\r\n      let lastSlap = this.state.slapCount ;\r\n\r\n      this.setState({\r\n          slapCount : lastSlap+1\r\n      })\r\n      if(this.state.slapCount > -1){\r\n          this.setState({\r\n            handImageDisplay : 'block'\r\n          })\r\n      }\r\n      if(this.state.slapCount > 30){\r\n        this.setState({\r\n          songVideo:  \"https://www.youtube.com/embed/XwjjbWg875Q?autoplay=1\",\r\n          quoteStyle : 'block'\r\n        })\r\n      }\r\n  }\r\n\r\n  changeImage = (e)=>{\r\n    e.preventDefault();\r\n\r\n    let reader = new FileReader();\r\n    if(e.target.files[0]=== null ){\r\n      return false\r\n    }\r\n    let file = e.target.files[0];\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        file: file,\r\n        enemies_img: reader.result\r\n      });\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n    this.slap()\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"container-fluid\">\r\n         <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n                <h4 className=\"text-center slap-counter\">\r\n                    Slap Counter : \r\n                </h4>\r\n                <h1 className=\"text-center\">{this.state.slapCount}</h1>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <div className=\"animation-target\" onClick={this.slap}>    \r\n                    <img \r\n                    style={{display:this.state.handImageDisplay}}\r\n                    alt=\"HandSlap\"\r\n                    src={this.state.slapImg}>\r\n                    </img>\r\n                </div>\r\n               \r\n                <div className=\"card\" >\r\n                  <div className=\"card-body\">\r\n                    <div className=\"card-img-overlay\" onClick={this.slap}>\r\n                      <h5 className=\"card-title\">\r\n                        {this.state.enemies_name}\r\n                      </h5>\r\n                    </div>\r\n                     <img \r\n                      className=\"card-img enemy-foto\" \r\n                      src={this.state.enemies_img}\r\n                      alt=\"EnemyFoto\"\r\n                      />\r\n                  </div>\r\n                </div>\r\n                <div className=\"card\">\r\n                  <div className=\"card-body\">\r\n                    <label className=\"label-file-upload\"  htmlFor=\"upload-file\"> Upload File</label>\r\n                    <input \r\n                    style     = {{display: 'none'}} \r\n                    type      = 'file' id=\"upload-file\" \r\n                    className = \"upload-file\"\r\n                    onChange   = {(e)=>this.changeImage(e)}\r\n                    >\r\n                    </input>\r\n                  </div>\r\n                  {/* Input Enemies Name */}\r\n                  <input onKeyUp={(e)=>this.enterName(e)} \r\n                  placeholder=\"Insert your enemies name\" \r\n                  className=\"form-control input-lg\"></input>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <button \r\n\r\n                    className=\"btn btn-block btn-danger btn-lg btn-tampol\" \r\n                    onClick={this.slap}>\r\n                      Tampols It Baby!!!\r\n                  </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 slap-counter\">\r\n              <iframe \r\n              title = \"song\"\r\n              width=\"100%\" height=\"300px\" src={this.state.songVideo}\r\n              frameBorder=\"0\"\r\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \r\n              >\r\n              </iframe>\r\n              <p className=\"text-muted text-center\" style={{display : this.state.quoteStyle}}>\r\n              I offer you peace, I offer you love, I offer you friendship. I see your beauty, I hear your need, I feel your feelings. My wisdom flows from the highest source. I salute that Source in you. Let us work together for unity and peace \r\n              <span>- Mahatma Gandhi</span>\r\n              </p>\r\n  \r\n              </div>\r\n          </div>\r\n          <div className=\"row text-center\">\r\n              <div className=\"col-md-12 navbar text-white fixed-bottom navbar-expand-sm navbar-dark bg-dark\">\r\n              Tampolin - 2019 by  :  <a href=\"https://www.youtube.com/agitnaeta\">\r\n                    @agitnaeta\r\n              </a>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    \r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}